# ============================================================================
# This file contains shell agnostic (tested on sh, bash and zsh)
# functions and settings like aliases, env vars etc.
# ============================================================================

OS="$(uname)"
# ----------------------------------------------------------------------------
# PATH
# ----------------------------------------------------------------------------
# ... macOS
if [ "$OS" = "Darwin" ]; then
	# Homebrew
	[ -d /opt/homebrew ] && PATH="$PATH":/opt/homebrew/bin
	# MacPorts
	[ -d /opt/local/bin ] && PATH="$PATH":/opt/local/bin
	# local MacPorts installation
	[ -d "$HOME"/ports ] && PATH="$PATH":"$HOME"/ports/bin
	# Local docker installation
	[ -d "$HOME"/.docker/bin ] && PATH="$PATH":"$HOME"/.docker/bin
	# Local, self compiled applications
	[ -d "$HOME"/usr/bin ] && PATH="$PATH":"$HOME"/usr/bin
# ... Linux
#elif [ "$OS" = "Linux" ]; then
	
fi

[ -d "$HOME"/bin ] && PATH="$PATH":"$HOME"/bin
# ----------------------------------------------------------------------------
# Aliases
# ----------------------------------------------------------------------------
# ... macOS
if [ "$OS" = "Darwin" ]; then
	[ -f "/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code" ] \
	&& alias code='/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code'

	[ -f "${HOME}/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code" ] \
	&& alias code='${HOME}/Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin/code'
	alias desktop-logout='launchctl bootout user/$(id -u)'
# ... Linux
#elif [ "$OS" = "Linux" ]; then

fi

# OS independent
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias grep='grep --color=auto'
alias dotfiles='git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'
alias ddusb='dd bs=16M status=progress oflag=sync'
# ----------------------------------------------------------------------------
# Colors
# ----------------------------------------------------------------------------
BLACK=$(tput setaf 0)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
WHITE=$(tput setaf 7)
BOLD=$(tput bold)
NORMAL=$(tput sgr0)
UNDERLINE=$(tput smul)
# ----------------------------------------------------------------------------
# Functions
# ----------------------------------------------------------------------------

# Open man page in Preview app.
function man_preview(){

	if [ "$OS" != "Darwin" ]; then
		echo "Works only on macOS"
		return 1
	fi


	mandoc -T pdf "$(/usr/bin/man -w $@)" | open -fa Preview
}

# Open man page in separate yellow terminal window.
function xman(){

	if [ "$OS" != "Darwin" ]; then
		echo "Works only on macOS"
		return 1
	fi

	# If more than one arg, then assume the first arg is the section.
	if [ ! -z "$2" ]; then
		section="$1"
		shift
		open x-man-page://$section/$@
	else
		open x-man-page://$@
	fi
}

function set_hostname(){
	if [ -z "$1" ]; then
		echo "Usage: set_hostname HOSTNAME"
		return 1
	fi

	if [ "$OS" = "Darwin" ]; then
		# ComputerName: user-friendly name for the system.
		# LocalHostName: local (Bonjour) host name.
		# HostName: The name associated with hostname and gethostname
		sudo scutil --set ComputerName "$1"
		sudo scutil --set LocalHostName "$1"
		sudo scutil --set HostName "$1"
	elif [ "$OS" = "Linux" ]; then
		sudo hostnamectl hostname "$1"
	fi
}

# List all files in passed search path sorted by modification time.
find_files_modified()
{
	SEARCH_PATH="."
	[ -n "$1" ] && SEARCH_PATH="$1"
	if [ "$OS" = "Darwin" ]; then
		find "$SEARCH_PATH" -type f -exec stat -f "%Sm %N" -t '%Y-%m-%d' {} + \
    	| sort \
    	| grep --color=auto -E '[^/]+$'
	elif [ "$OS" = "Linux" ]; then
		find "$SEARCH_PATH" -type f -printf '%TY-%Tm-%Td %p\n' \
		| sort \
		| grep --color=auto -E '[^/]+$'
	else
		return 1
	fi
}

# Colors
color_demo()
{
        echo "${BLACK}BLACK${BOLD}   BOLD       ${UNDERLINE}UNDERLINE${NORMAL}"
        echo "${RED}RED${BOLD}     BOLD ${UNDERLINE}UNDERLINE${NORMAL}"
        echo "${GREEN}GREEN ${BOLD}  BOLD       ${UNDERLINE}UNDERLINE${NORMAL}"
        echo "${YELLOW}YELLOW ${BOLD} BOLD      ${UNDERLINE}UNDERLINE${NORMAL}"
        echo "${BLUE}BLUE ${BOLD}   BOLD        ${UNDERLINE}UNDERLINE${NORMAL}"
        echo "${MAGENTA}MAGENTA ${BOLD}BOLD     ${UNDERLINE}UNDERLINE${NORMAL}"
        echo "${CYAN}CYAN ${BOLD}   BOLD        ${UNDERLINE}UNDERLINE${NORMAL}"
        echo "${WHITE}WHITE ${BOLD}  BOLD       ${UNDERLINE}UNDERLINE${NORMAL}"
        echo "${NORMAL}"
}

# Generate random passwords
gen_password()
{
	local length=12
	[ -n "$1" ] && length="$1"
	pass=$(LC_ALL=C tr -dc 'A-Za-z0-9!?$%&/=():' < /dev/random | head -c "$length")
	echo "$pass"
}

# Recursivly set file mode to sane and private (750 directories, 640 files).
repair_filemod()
{
	CWD="$(pwd)"
	echo "cwd: ${CWD}, setting all directories to 750 and all files to 640? (y/N)"
	read RESPONSE
	if [ "$RESPONSE" = "y" ]; then
		find "$CWD" -type d -exec chmod 750 {} \;
		find "$CWD" -type f -exec chmod 640 {} \;
	else
		echo "NO"
	fi
}

lsssh()
{
	# List all hosts defined in $HOME/.ssh/config
	if [ -f "$HOME"/.ssh/config ]; then
		grep '^[^[:space:]#]' "$HOME"/.ssh/config \
		| tr -s '[:space:]' \
		| cut -d" " -f2
	fi
}

pushover()
{
	curl -s \
		--form-string "token=${PUSHOVER_TOKEN}" \
		--form-string "user=${PUSHOVER_USERKEY}" \
		--form-string "message=$1" \
		https://api.pushover.net/1/messages.json
	return "$?"
}

battery_health()
{
	if [ "$OS" = "Darwin" ]; then
		filter='.SPPowerDataType[] |
    			select(._name == "spbattery_information") |
    			.sppower_battery_health_info |
    			{sppower_battery_health_maximum_capacity, sppower_battery_cycle_count}'

		system_profiler SPPowerDataType -json | jq "$filter"
	elif [ "$OS" = "Linux" ]; then
		if command -v inxi; then
			inxi --battery
		else
			echo "Error, install inxi tool."
			return 1
		fi
	fi
}
