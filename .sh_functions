# === Helper functions
# fail [EXIT_CODE] [ERROR_MESSAGE], default fail 1 ""
fail()
{
	if [ -n "$2" ]; then
		echo "$2"
	fi
	if [ -n "$1" ]; then
		return "$1"
	else
		return 1
	fi
}
# === /Helper Functions
# List all files in passed search path sorted by modification time.
find_files_modified()
{
	SEARCH_PATH="."
	[ -n "$1" ] && SEARCH_PATH="$1"
	if [ "$OS" = "Darwin" ]; then
		find "$SEARCH_PATH" -type f -exec stat -f "%Sm %N" -t '%Y-%m-%d' {} + \
    	| sort \
    	| grep --color=auto -E '[^/]+$'
	elif [ "$OS" = "Linux" ]; then
		find "$SEARCH_PATH" -type f -printf '%TY-%Tm-%Td %p\n' \
		| sort \
		| grep --color=auto -E '[^/]+$'
	else
		return 1
	fi
}

# Colors
color_demo()
{
        echo "${BLACK}BLACK${BOLD}   BOLD       ${UNDERLINE}UNDERLINE${NORMAL}"
        echo "${RED}RED${BOLD}     BOLD ${UNDERLINE}UNDERLINE${NORMAL}"
        echo "${GREEN}GREEN ${BOLD}  BOLD       ${UNDERLINE}UNDERLINE${NORMAL}"
        echo "${YELLOW}YELLOW ${BOLD} BOLD      ${UNDERLINE}UNDERLINE${NORMAL}"
        echo "${BLUE}BLUE ${BOLD}   BOLD        ${UNDERLINE}UNDERLINE${NORMAL}"
        echo "${MAGENTA}MAGENTA ${BOLD}BOLD     ${UNDERLINE}UNDERLINE${NORMAL}"
        echo "${CYAN}CYAN ${BOLD}   BOLD        ${UNDERLINE}UNDERLINE${NORMAL}"
        echo "${WHITE}WHITE ${BOLD}  BOLD       ${UNDERLINE}UNDERLINE${NORMAL}"
        echo "${NORMAL}"
}

# Generate random passwords
gen_password()
{
	local length=12
	[ -n "$1" ] && length="$1"
	pass=$(LC_ALL=C tr -dc 'A-Za-z0-9!?$%&/=():' < /dev/random | head -c "$length")
	echo "$pass"
}

# Recursivly set file mode to sane and private (750 directories, 640 files).
repair_filemod()
{
	CWD="$(pwd)"
	echo "cwd: ${CWD}, setting all directories to 750 and all files to 640? (y/N)"
	read RESPONSE
	if [ "$RESPONSE" = "y" ]; then
		find "$CWD" -type d -exec chmod 750 {} \;
		find "$CWD" -type f -exec chmod 640 {} \;
	else
		echo "NO"
	fi
}

lsssh()
{
	# List all hosts defined in $HOME/.ssh/config
	if [ -f "$HOME"/.ssh/config ]; then
		grep '^[^[:space:]#]' "$HOME"/.ssh/config \
		| tr -s '[:space:]' \
		| cut -d" " -f2
	fi
}

pushover()
{
	curl -s \
		--form-string "token=${PUSHOVER_TOKEN}" \
		--form-string "user=${PUSHOVER_USERKEY}" \
		--form-string "message=$1" \
		https://api.pushover.net/1/messages.json
	return "$?"
}
